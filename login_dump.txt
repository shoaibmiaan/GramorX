]633;E;echo "### Directory Structure";4b467f2b-48d2-4c42-b4df-fa65a2985542]633;C### Directory Structure
pages/login
â”œâ”€â”€ email.tsx
â”œâ”€â”€ index.tsx
â”œâ”€â”€ password.tsx
â””â”€â”€ phone.tsx

1 directory, 4 files

### File Contents
===== pages/login/password.tsx =====
// pages/signup/password.tsx
'use client';

import * as React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { Button } from '@/components/design-system/Button';
import { Input } from '@/components/design-system/Input';
import { Alert } from '@/components/design-system/Alert';
import { supabaseBrowser as supabase } from '@/lib/supabaseBrowser';

export default function SignupPassword() {
  const router = useRouter();
  const [email, setEmail] = React.useState<string>('');
  const [password, setPassword] = React.useState<string>('');
  const [busy, setBusy] = React.useState(false);
  const [err, setErr] = React.useState<string | null>(null); // <- declare err

  React.useEffect(() => {
    const maybeEmail = (router.query.email as string) || '';
    if (maybeEmail) setEmail(maybeEmail);
  }, [router.query.email]);

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    setErr(null);
    setBusy(true);
    try {
      if (!email || !password) {
        setErr('Please enter both email and password.');
        return;
      }
      const { error } = await supabase.auth.signUp({ email, password });
      if (error) {
        setErr(error.message || 'Sign up failed.');
        return;
      }
      router.push('/signup/verify?email=' + encodeURIComponent(email));
    } catch (e: any) {
      setErr(e?.message ?? 'Unexpected error.');
    } finally {
      setBusy(false);
    }
  }

  return (
    <div className="min-h-screen bg-background text-foreground flex items-center justify-center p-6">
      <div className="w-full max-w-md card-surface p-6 rounded-ds-2xl shadow-glow">
        <h1 className="text-2xl font-semibold mb-2">Create your password</h1>
        <p className="text-mutedText mb-6">Use at least 8 characters.</p>

        {err && (
          <Alert variant="danger" className="mb-4">
            {err}
          </Alert>
        )}

        <form onSubmit={handleSubmit} className="space-y-4">
          <Input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.currentTarget.value)}
            placeholder="you@example.com"
            required
          />
          <Input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.currentTarget.value)}
            placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
            required
          />
          <Button type="submit" disabled={busy} variant="primary" className="w-full">
            {busy ? 'Creatingâ€¦' : 'Continue'}
          </Button>
        </form>

        <div className="mt-4 text-sm text-mutedText">
          Already have an account?{' '}
          <Link href="/login" className="text-primary underline-offset-2 hover:underline">
            Log in
          </Link>
        </div>
      </div>
    </div>
  );
}
===== pages/login/index.tsx =====
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';

import { Button } from '@/components/design-system/Button';
import { Alert } from '@/components/design-system/Alert';
import { Badge } from '@/components/design-system/Badge';
import {
  AppleIcon,
  GoogleIcon,
  FacebookIcon,
  MailIcon,
  SmsIcon,
} from '@/components/design-system/icons';
import { supabaseBrowser as supabase } from '@/lib/supabaseBrowser';
import { destinationByRole } from '@/lib/routeAccess';

function SectionLabel({ children }: { children: React.ReactNode }) {
  return (
    <div className="mb-3 text-sm uppercase tracking-wide text-mutedText">
      {children}
    </div>
  );
}

export default function LoginOptions() {
  const [err, setErr] = useState<string | null>(null);
  const [busy, setBusy] = useState<'apple' | 'google' | 'facebook' | null>(null);
  const [selectedRole, setSelectedRole] = useState<string | null>(null);
  const [ready, setReady] = useState(false);
  const router = useRouter();

  // Only redirect away from /login if we DEFINITELY have a session
  useEffect(() => {
    let mounted = true;
    (async () => {
      const {
        data: { session },
      } = await supabase.auth.getSession();

      if (!mounted) return;

      if (session) {
        const rawNext = typeof router.query.next === 'string' ? router.query.next : '';
        const safe =
          rawNext && !rawNext.startsWith('http') && rawNext !== '/login'
            ? rawNext
            : destinationByRole(session.user);
        if (router.asPath !== safe) {
          await router.replace(safe);
          return;
        }
      }
      setReady(true);
    })();
    return () => {
      mounted = false;
    };
  }, [router.query.next, router.asPath, router.replace]);

  // Persist role in query + localStorage
  useEffect(() => {
    if (!router.isReady) return;
    const roleQuery = typeof router.query.role === 'string' ? router.query.role : null;

    if (roleQuery) {
      setSelectedRole(roleQuery);
      if (typeof window !== 'undefined') localStorage.setItem('selectedRole', roleQuery);
    } else if (typeof window !== 'undefined') {
      const stored = localStorage.getItem('selectedRole');
      if (stored) {
        setSelectedRole(stored);
        router.replace(
          { pathname: router.pathname, query: { ...router.query, role: stored } },
          undefined,
          { shallow: true }
        );
      }
    }
  }, [router]);

  function chooseRole(role: string) {
    setSelectedRole(role);
    if (typeof window !== 'undefined') localStorage.setItem('selectedRole', role);
    router.replace(
      { pathname: router.pathname, query: { ...router.query, role } },
      undefined,
      { shallow: true }
    );
  }

  function clearRole() {
    setSelectedRole(null);
    if (typeof window !== 'undefined') localStorage.removeItem('selectedRole');
    const { role, ...rest } = router.query as Record<string, any>;
    router.replace({ pathname: router.pathname, query: { ...rest } }, undefined, { shallow: true });
  }

  async function oauth(provider: 'apple' | 'google' | 'facebook') {
    try {
      setErr(null);
      setBusy(provider);

      const origin = typeof window !== 'undefined' ? window.location.origin : undefined;
      const next = `/dashboard${selectedRole ? `?role=${encodeURIComponent(selectedRole)}` : ''}`;
      const redirectTo = origin ? `${origin}/auth/callback?next=${encodeURIComponent(next)}` : undefined;

      const { error } = await supabase.auth.signInWithOAuth({
        provider,
        options: { redirectTo },
      });
      if (error) throw error;
    } catch (e: unknown) {
      const message = e instanceof Error ? e.message : 'Unable to continue.';
      setErr(message);
      setBusy(null);
    }
  }

  if (!ready) {
    return (
      <div className="p-6 text-mutedText" aria-live="polite">
        Checking sessionâ€¦ Please wait.
      </div>
    );
  }

  return (
    <>
      {err && (
        <Alert variant="error" title="Error" className="mb-4" role="status" aria-live="assertive">
          {err}
        </Alert>
      )}

      {!selectedRole ? (
        <>
          <SectionLabel>Sign in as</SectionLabel>

          <div className="grid gap-3">
            <Button
              onClick={() => chooseRole('student')}
              variant="soft"
              tone="primary"
              size="lg"
              shape="rounded"
              fullWidth
              elevateOnHover
              className="justify-between"
              trailingIcon={<span className="text-mutedText">â†’</span>}
            >
              <span className="font-medium">Student</span>
            </Button>

            <Button
              onClick={() => chooseRole('teacher')}
              variant="soft"
              tone="accent"
              size="lg"
              shape="rounded"
              fullWidth
              elevateOnHover
              className="justify-between"
              trailingIcon={<span className="text-mutedText">â†’</span>}
            >
              <span className="font-medium">Teacher</span>
            </Button>
          </div>

          <div className="mt-6 text-sm text-mutedText">
            By continuing, you agree to our{' '}
            <Link href="/legal/terms" className="text-primary hover:underline hover:text-primary/80 transition">
              Terms
            </Link>{' '}
            and{' '}
            <Link href="/legal/privacy" className="text-primary hover:underline hover:text-primary/80 transition">
              Privacy Policy
            </Link>
            .
          </div>
        </>
      ) : (
        <>
          <SectionLabel>Sign in</SectionLabel>

          <div className="grid gap-3">
            {/* Email = main CTA */}
            <Button
              href={`/login/email${selectedRole ? `?role=${selectedRole}` : ''}`}
              variant="primary"
              size="lg"
              shape="rounded"
              fullWidth
              leadingIcon={<MailIcon className="h-5 w-5" />}
            >
              Email &amp; Password
            </Button>

            {/* Google (soft primary) */}
            <Button
              onClick={() => oauth('google')}
              loading={busy === 'google'}
              loadingText="Opening Googleâ€¦"
              variant="soft"
              tone="primary"
              size="lg"
              shape="rounded"
              fullWidth
              leadingIcon={<GoogleIcon className="h-5 w-5" />}
              aria-label="Sign in with Google"
            >
              Sign in with Google
            </Button>

            {/* Facebook (soft accent) */}
            <Button
              onClick={() => oauth('facebook')}
              loading={busy === 'facebook'}
              loadingText="Opening Facebookâ€¦"
              variant="soft"
              tone="accent"
              size="lg"
              shape="rounded"
              fullWidth
              leadingIcon={<FacebookIcon className="h-5 w-5" />}
              aria-label="Sign in with Facebook"
            >
              Sign in with Facebook
            </Button>

            {/* Apple (soft secondary, disabled) */}
            <Button
              disabled
              variant="soft"
              tone="secondary"
              size="lg"
              shape="rounded"
              fullWidth
              className="relative justify-start opacity-75"
              leadingIcon={<AppleIcon className="h-5 w-5" />}
              aria-disabled="true"
            >
              <span>Sign in with Apple</span>
              <Badge
                variant="info"
                size="sm"
                className="absolute top-2 right-3 text-xs px-2 py-0.5"
              >
                Coming Soon
              </Badge>
            </Button>

            {/* Phone (soft secondary, disabled) */}
            <Button
              disabled
              variant="soft"
              tone="secondary"
              size="lg"
              shape="rounded"
              fullWidth
              className="relative justify-start opacity-75"
              leadingIcon={<SmsIcon className="h-5 w-5" />}
              aria-disabled="true"
            >
              <span>Phone (OTP)</span>
              <Badge
                variant="info"
                size="sm"
                className="absolute top-2 right-3 text-xs px-2 py-0.5"
              >
                Coming Soon
              </Badge>
            </Button>
          </div>

          <div className="mt-6 flex items-center justify-between text-sm text-mutedText">
            <div>
              New here?{' '}
              <Link
                href={`/signup${selectedRole ? `?role=${selectedRole}` : ''}`}
                className="text-primary hover:underline hover:text-primary/80 transition"
              >
                Create an account
              </Link>
            </div>
            <Button variant="link" onClick={clearRole} aria-label="Change selected role">
              Change role
            </Button>
          </div>
        </>
      )}
    </>
  );
}
===== pages/login/email.tsx =====
'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { Input } from '@/components/design-system/Input';
import { PasswordInput } from '@/components/design-system/PasswordInput';
import { Button } from '@/components/design-system/Button';
import { Alert } from '@/components/design-system/Alert';
import { supabaseBrowser as supabase } from '@/lib/supabaseBrowser';
import { redirectByRole } from '@/lib/routeAccess';
import { isValidEmail } from '@/utils/validation';
import { getAuthErrorMessage } from '@/lib/authErrors';
import useEmailLoginMFA from '@/hooks/useEmailLoginMFA';

export default function LoginWithEmail() {
  const [email, setEmail] = useState('');
  const [pw, setPw] = useState('');
  const [emailErr, setEmailErr] = useState<string | null>(null);
  const [err, setErr] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const {
    otp,
    setOtp,
    otpSent,
    createChallenge,
    verifyOtp,
    verifying,
    error: mfaErr,
    setError: setMfaErr,
  } = useEmailLoginMFA();

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setErr(null);
    setMfaErr(null);

    const trimmedEmail = email.trim();
    if (!trimmedEmail || !pw) {
      setErr('Email and password are required.');
      return;
    }
    if (!isValidEmail(trimmedEmail)) {
      setEmailErr('Enter a valid email address.');
      return;
    }
    setEmailErr(null);

    setLoading(true);
    try {
      const res = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: trimmedEmail, password: pw }),
      });
      const body = await res.json().catch(() => ({}));
      setLoading(false);

      if (!res.ok || !body.session) {
        const msg =
          typeof body.error === 'string'
            ? body.error
            : getAuthErrorMessage(body.error) ?? 'Unable to sign in. Please try again.';
        setErr(msg);
        return;
      }

      await supabase.auth.setSession({
        access_token: body.session.access_token,
        refresh_token: body.session.refresh_token,
      });

      const {
        data: { user },
      } = await supabase.auth.getUser();

      const challenged = await createChallenge(user);
      if (challenged) return;

      try {
        await fetch('/api/auth/login-event', { method: 'POST' });
      } catch {}
      redirectByRole(body.session.user);
    } catch {
      setLoading(false);
      setErr('Unable to sign in. Please try again.');
    }
  }

  return (
    <>
      {(err || mfaErr) && (
        <Alert variant="error" title="Error" className="mb-4">
          {err || mfaErr}
        </Alert>
      )}

      {!otpSent ? (
        <form onSubmit={onSubmit} className="space-y-6 mt-2">
          <Input
            label="Email"
            type="email"
            placeholder="you@example.com"
            value={email}
            onChange={(e) => {
              const v = e.target.value;
              setEmail(v);
              setEmailErr(!v || isValidEmail(v.trim()) ? null : 'Enter a valid email address.');
            }}
            autoComplete="email"
            required
            error={emailErr ?? undefined}
          />
          <PasswordInput
            label="Password"
            placeholder="Your password"
            value={pw}
            onChange={(e) => setPw(e.target.value)}
            autoComplete="current-password"
            required
          />
          <Button type="submit" variant="primary" className="rounded-ds-xl" fullWidth disabled={loading}>
            {loading ? 'Signing inâ€¦' : 'Sign in'}
          </Button>
          <Button asChild variant="link" className="mt-2" fullWidth>
            <Link href="/forgot-password">Forgot password?</Link>
          </Button>
          <p className="mt-2 text-xs text-mutedText text-center">
            By continuing you agree to our <Link href="/legal/terms" className="underline">Terms</Link> &amp; <Link href="/legal/privacy" className="underline">Privacy</Link>.
          </p>
        </form>
      ) : (
        <form onSubmit={verifyOtp} className="space-y-6 mt-2 max-w-xs">
          <Input
            label="Enter OTP"
            value={otp}
            onChange={(e) => setOtp(e.target.value)}
            autoComplete="one-time-code"
            placeholder="6-digit code"
            required
          />
          <Button type="submit" variant="primary" className="rounded-ds-xl" fullWidth disabled={verifying}>
            {verifying ? 'Verifyingâ€¦' : 'Verify & Sign in'}
          </Button>
        </form>
      )}

      <Button asChild variant="secondary" className="mt-6 rounded-ds-xl" fullWidth>
        <Link href="/login">Back to Login Options</Link>
      </Button>
    </>
  );
}
===== pages/login/phone.tsx =====
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { Input } from '@/components/design-system/Input';
import { Button } from '@/components/design-system/Button';
import { Alert } from '@/components/design-system/Alert';
import { supabaseBrowser as supabase } from '@/lib/supabaseBrowser';
import { redirectByRole } from '@/lib/routeAccess';
import { isValidE164Phone } from '@/utils/validation';
import { getAuthErrorMessage } from '@/lib/authErrors';

export default function LoginWithPhone() {
  const [phone, setPhone] = useState('');
  const [code, setCode] = useState('');
  const [stage, setStage] = useState<'request' | 'verify'>('request');
  const [phoneErr, setPhoneErr] = useState<string | null>(null);
  const [err, setErr] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [resending, setResending] = useState(false);
  const [resendAttempts, setResendAttempts] = useState(0);
  const [cooldown, setCooldown] = useState(0);

  const MAX_RESENDS = Number(process.env.NEXT_PUBLIC_MAX_RESEND_ATTEMPTS ?? 3);
  const RESEND_COOLDOWN = Number(process.env.NEXT_PUBLIC_RESEND_COOLDOWN ?? 30);

  useEffect(() => {
    if (!cooldown) return;
    const timer = setInterval(() => setCooldown((c) => (c > 0 ? c - 1 : 0)), 1000);
    return () => clearInterval(timer);
  }, [cooldown]);

  async function requestOtp(e: React.FormEvent) {
    e.preventDefault();
    setErr(null);
    const trimmedPhone = phone.trim();
    if (!isValidE164Phone(trimmedPhone)) {
      setPhoneErr('Enter your phone number in E.164 format, e.g. +923001234567');
      return;
    }
    setPhoneErr(null);
    setLoading(true);
    const { error } = await supabase.auth.signInWithOtp({
      phone: trimmedPhone,
      options: { shouldCreateUser: false },
    });
    setLoading(false);
    if (error) return setErr(getAuthErrorMessage(error));
    setResendAttempts(0);
    setCooldown(RESEND_COOLDOWN);
    setStage('verify');
  }

  async function verifyOtp(e: React.FormEvent) {
    e.preventDefault();
    setErr(null);
    if (!code) return setErr('Enter the 6-digit code.');

    const trimmedPhone = phone.trim();
    setLoading(true);
    // @ts-expect-error token is supported for verification by supabase-js
    const { data, error } = await supabase.auth.signInWithOtp({ phone: trimmedPhone, token: code });
    setLoading(false);
    if (error) return setErr(getAuthErrorMessage(error));

    if (data.session) {
      await supabase.auth.setSession({
        access_token: data.session.access_token,
        refresh_token: data.session.refresh_token,
      });
      try { await supabase.auth.updateUser({ data: { status: 'active' } }); } catch {}
      try { await fetch('/api/auth/login-event', { method: 'POST' }); } catch {}
      redirectByRole(data.session.user);
    }
  }

  async function resendOtp() {
    if (resendAttempts >= MAX_RESENDS || cooldown > 0) return;
    setErr(null);
    setResending(true);
    setLoading(true);
    try {
      const trimmedPhone = phone.trim();
      const { error } = await supabase.auth.signInWithOtp({
        phone: trimmedPhone,
        options: { shouldCreateUser: false },
      });
      if (error) return setErr(getAuthErrorMessage(error));
      setResendAttempts((a) => a + 1);
      setCooldown(RESEND_COOLDOWN);
      try {
        await fetch('/api/auth/otp-limit', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ phone: trimmedPhone }),
        });
      } catch {}
    } finally {
      setLoading(false);
      setResending(false);
    }
  }

  return (
    <>
      {err && (
        <Alert variant="error" title="Error" className="mb-4">
          {err}
        </Alert>
      )}

      {stage === 'request' ? (
        <form onSubmit={requestOtp} className="space-y-6 mt-2">
          <Input
            label="Phone number"
            type="tel"
            placeholder="+923001234567"
            value={phone}
            onChange={(e) => {
              const v = e.target.value;
              setPhone(v);
              setPhoneErr(!v || isValidE164Phone(v.trim()) ? null : 'Enter your phone number in E.164 format, e.g. +923001234567');
            }}
            required
            hint="Use E.164 format, e.g. +923001234567"
            error={phoneErr ?? undefined}
          />
          <Button type="submit" variant="primary" className="rounded-ds-xl" fullWidth disabled={loading}>
            {loading ? 'Sendingâ€¦' : 'Send code'}
          </Button>
        </form>
      ) : (
        <form onSubmit={verifyOtp} className="space-y-6 mt-2">
          <Input
            label="Verification code"
            inputMode="numeric"
            placeholder="123456"
            value={code}
            onChange={(e) => setCode(e.target.value)}
            required
          />
          <Button
            type="submit"
            variant="primary"
            className="rounded-ds-xl"
            fullWidth
            disabled={loading && !resending}
          >
            {loading && !resending ? 'Verifyingâ€¦' : 'Verify & Continue'}
          </Button>
          <Button
            type="button"
            variant="secondary"
            className="rounded-ds-xl"
            fullWidth
            onClick={resendOtp}
            disabled={loading || cooldown > 0 || resendAttempts >= MAX_RESENDS}
          >
            {loading && resending
              ? 'Resendingâ€¦'
              : cooldown > 0
                ? `Resend in ${cooldown}s`
                : resendAttempts >= MAX_RESENDS
                  ? 'Resend limit reached'
                  : `Resend code (${MAX_RESENDS - resendAttempts} left)`}
          </Button>
          <p className="text-xs text-mutedText text-center">
            We never share your number. Standard SMS rates may apply.
          </p>
          <p className="text-small text-mutedText text-center">
            {resendAttempts >= MAX_RESENDS
              ? 'No resend attempts left.'
              : cooldown > 0
                ? `You can resend the code in ${cooldown}s.`
                : `${MAX_RESENDS - resendAttempts} resend attempts remaining.`}
          </p>
        </form>
      )}

      <Button asChild variant="secondary" className="mt-6 rounded-ds-xl" fullWidth>
        <Link href="/login">Back to Login Options</Link>
      </Button>
    </>
  );
}
